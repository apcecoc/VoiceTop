__version__ = (1, 0, 0)

#       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

#              ¬© Copyright 2025
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @apcecoc and @Loaaal888

from telethon import events
from telethon.tl.types import Message, Channel, User
from .. import loader, utils
import logging
from typing import Dict, List
from collections import defaultdict

logger = logging.getLogger(__name__)

@loader.tds
class VoiceTopMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    
    strings = {
    "name": "VoiceTop",
    "en": {
        "processing": "<b>üîÑ Counting voice messages...\nAnalyzed: {} messages</b>",
        "no_voices": "<b>‚ùå No voice messages in this chat</b>",
        "voice_top": "<b>üìä Voice Messages Top\nTotal analyzed: {} messages</b>\n\n{}",
        "voice_stat": "<b>üë§ {}</b>: {} voice messages"
    },
    "ru": {
        "processing": "<b>üîÑ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {} —Å–æ–æ–±—â–µ–Ω–∏–π</b>",
        "no_voices": "<b>‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>",
        "voice_top": "<b>üìä –¢–æ–ø –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º\n–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {} —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n{}",
        "voice_stat": "<b>üë§ {}</b>: {} –≥–æ–ª–æ—Å–æ–≤—ã—Ö"
    }
}


    def __init__(self):
        self.config = loader.ModuleConfig(
            "MSG_LIMIT", 15000,
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )

    async def client_ready(self, client, db):
        self.db = db
        self.client = client
        
    async def voicecmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        .voice [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞]"""
        
        args = utils.get_args_raw(message)
        msg_limit = int(args) if args.isdigit() else self.config["MSG_LIMIT"]
        
        chat = await message.get_chat()
        await message.edit(self.strings["processing"].format(0))
        
        voice_counter: Dict[int, int] = defaultdict(int)
        processed = 0
        update_interval = 1000  # –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        try:
            async for msg in self.client.iter_messages(chat, limit=msg_limit):
                processed += 1
                if msg.voice:
                    sender = await msg.get_sender()
                    if isinstance(sender, (User, Channel)):
                        voice_counter[sender.id] += 1
                
                if processed % update_interval == 0:
                    await message.edit(
                        self.strings["processing"].format(processed),
                        parse_mode="html"
                    )
                    
        except Exception as e:
            logger.error(f"Error during message processing: {str(e)}")
            await message.edit("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ")
            return

        if not voice_counter:
            await message.edit(self.strings["no_voices"])
            return

        sorted_voices = sorted(voice_counter.items(), key=lambda x: x[1], reverse=True)
        
        text = ""
        for i, (user_id, count) in enumerate(sorted_voices, start=1):
            try:
                user = await self.client.get_entity(user_id)
                name = getattr(user, 'first_name', '') or getattr(user, 'title', '') or str(user_id)
                text += self.strings["voice_stat"].format(name, count) + "\n"
            except Exception as e:
                logger.error(f"Error getting user info: {str(e)}")
                continue
                
            if i >= 20:  # –£–≤–µ–ª–∏—á–∏–ª –¥–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                break
                
        await message.edit(
            self.strings["voice_top"].format(processed, text),
            parse_mode="html"
        )

    async def voiceconfigcmd(self, message: Message):
        """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
        .voiceconfig [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π]"""
        args = utils.get_args_raw(message)
        
        if not args or not args.isdigit():
            await message.edit(f"<b>–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b> {self.config['MSG_LIMIT']}")
            return
            
        self.config["MSG_LIMIT"] = int(args)
        await message.edit(f"<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {args}")

    async def vtcmd(self, message: Message):
        """–ê–ª–∏–∞—Å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .voice"""
        await self.voicecmd(message)